apply plugin: 'com.android.application'

// Enable collecting coverage also for unit tests
apply plugin: 'jacoco'

repositories {
    jcenter()
    google()
    maven { url "https://jitpack.io" }
}

jacoco {
    // This should match the one inside build.gradle
    toolVersion = '0.8.6'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // This will break JDK 9 otherwise
    jacoco.excludes = ['jdk.internal.*']
}

// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}


android {
    compileSdkVersion 29

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }


    defaultConfig {
        versionCode 236
        versionName "10.11.6"
        minSdkVersion 23
        targetSdkVersion 29
        testApplicationId "org.liberty.android.fantastischmemo.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        multiDexEnabled true
        archivesBaseName = "AnyMemo"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            versionNameSuffix "-${getBuildString()}"
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
            testCoverageEnabled true
        }

    }

    flavorDimensions "mode", "api"

    productFlavors {
        free {
            applicationId "org.liberty.android.fantastischmemo"
            dimension "mode"
        }
        pro {
            applicationId "org.liberty.android.fantastischmemopro"
            dimension "mode"
        }
        dev {
            applicationId "org.liberty.android.fantastischmemodev"
            dimension "mode"
        }
        api23 {
            minSdkVersion 23
            dimension "api"
        }
        api16 {
            minSdkVersion 16
            dimension "api"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests.all {

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            jacoco {
                includeNoLocationClasses = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if (carvedTests) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                }
            }
        }
    }

}

dependencies {
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.fragment:fragment:1.2.5'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.j256.ormlite:ormlite-core:5.1"
    implementation "com.j256.ormlite:ormlite-android:5.1"
    implementation "com.squareup.okhttp3:okhttp:3.10.0"

    implementation "io.reactivex.rxjava2:rxjava:2.0.4"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    implementation "commons-io:commons-io:2.4"

    implementation "com.google.guava:guava:27.0.1-android"
    implementation "com.opencsv:opencsv:3.4"
    implementation "com.github.PhilJay:MPAndroidChart:v2.1.6"
    implementation "com.rarepebble:colorpicker:2.0.0"
    implementation "com.simplify:ink:1.0.0"

    implementation "com.google.dagger:dagger:2.22.1"
    annotationProcessor "com.google.dagger:dagger-compiler:2.22.1"

    implementation "com.google.android.gms:play-services-auth:18.1.0"
    compileOnly "javax.annotation:jsr250-api:1.0"

    // The following raise the error: "java.lang.RuntimeException: huh? java 11, need help!"
    // With java 8 and robolectric 4.1 work
    testImplementation 'org.robolectric:robolectric:4.2'
    // testImplementation 'org.robolectric:robolectric:4.1'
    // testImplementation 'de.unipassau.abc:test-utils:1.0-SNAPSHOT'
    // testImplementation 'com.google.guava:guava:27.0.1-jre'
    testImplementation 'org.mockito:mockito-core:2.6.3'
    // androidTestCompile 'org.mockito:mockito-android:2.6.3'


    androidTestImplementation "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:1.4"
    androidTestImplementation "org.mockito:mockito-core:1.10.19"
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.2.0')

    androidTestImplementation "androidx.test:runner:1.2.0"
}

static def getBuildString() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return "b" + formattedDate
}

task copySecretsIfNotExists {
    doLast {
        if (file('src/main/java/org/liberty/android/fantastischmemo/AMSecrets.java').exists()) {
            logger.warn('Removing AMSecrets.java since it is now in common package.')
            delete 'src/main/java/org/liberty/android/fantastischmemo/AMSecrets.java'
        }
        if (!file('src/main/java/org/liberty/android/fantastischmemo/common/AMSecrets.java').exists()) {
            logger.warn('Empty AMSecrets.java is created from AMSecrets.java.template. Please fill in the values.')
            copy {
                from "src/main/java/org/liberty/android/fantastischmemo/common/"
                into "src/main/java/org/liberty/android/fantastischmemo/common/"
                rename "AMSecrets.java.template", "AMSecrets.java"
                include "AMSecrets.java.template"
            }
        }
    }
}

task jacocoTestsReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running the Original Tests."

    reports {
        xml.enabled = true
        html.enabled = true
        // TODO Move this above 
        if (carvedTests) {


            println "\n\n\n\n\n\n"
            println " -- " + file("$coverageReportPrefix/html")

            html.destination file("$coverageReportPrefix/html")
            xml.destination file("$coverageReportPrefix/xml")
        }
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.class',
                      'androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"

    //sourceDirectories = files([mainSrc])
    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "${buildDir}", includes: [
            "/jacoco/testDebugUnitTest.exec"]))
    //classDirectories = files([debugTree])
    //executionData = fileTree(dir: "${buildDir}", includes:[
    //        "/jacoco/testDebugUnitTest.exec"])
}

task jacocoUnitTestCoverage(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage report for unit tests'
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def coverageSourceDirs = ["${project.projectDir}/src/main/java"]
    getClassDirectories().setFrom(fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter))
    getSourceDirectories().setFrom(files(coverageSourceDirs))

    getExecutionData().setFrom(fileTree(
            dir: "${buildDir}",
            include: ['jacoco/testDebugUnitTest.exec']
    ))
}

task jacocoGUITestCoverage(type: JacocoReport, dependsOn: ['connectedDevApi23DebugAndroidTest']) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage report for GUI tests'
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def coverageSourceDirs = ["${project.projectDir}/src/main/java"]
    getClassDirectories().setFrom(fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter))
    getSourceDirectories().setFrom(files(coverageSourceDirs))

    getExecutionData().setFrom(fileTree(
            dir: "${buildDir}",
            include: ['outputs/code_coverage/debugAndroidTest/connected/*coverage.ec']
    ))
}


preBuild.dependsOn copySecretsIfNotExists 
